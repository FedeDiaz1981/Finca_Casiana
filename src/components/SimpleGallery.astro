---
interface SimpleImage {
  imagen: string;
  caption?: string;
  alt?: string;
  width?: number;
  height?: number;
}

interface Props {
  images: SimpleImage[];
  intervalMs?: number;
}

const { images: inputImages, intervalMs = 4000 } = Astro.props as Props;

/* Helpers de orden por nombre de archivo (asc) */
const baseName = (p: string) =>
  (p.split("/").pop() ?? "")
    .replace(/\?.*$/, "") // quita query (?v=123)
    .replace(/#.*$/, "") // quita fragmento
    .replace(/\.[a-f0-9]{6,}\./i, "."); // quita hash intermedio: foto.abc123.jpg -> foto.jpg

const sortByFileAsc = (a: SimpleImage, b: SimpleImage) =>
  baseName(a.imagen).localeCompare(baseName(b.imagen), "es", {
    numeric: true,
    sensitivity: "base",
  });

/* Array ordenado (no muta props) */
const images = (inputImages ?? []).slice().sort(sortByFileAsc);

const uid = `gal-${Math.random().toString(36).slice(2)}`;
const payloadAttr = encodeURIComponent(JSON.stringify(images || []));

const esFallback = {
  aria: {
    prev: "Anterior",
    next: "Siguiente",
    close: "Cerrar",
    gallery: "Galería de imágenes",
  },
};
---

<section
  id={uid}
  data-comp="simple-image-gallery"
  class="w-full content-center"
  data-interval={intervalMs}
  data-payload={payloadAttr}
  data-t-prev={esFallback.aria.prev}
  data-t-next={esFallback.aria.next}
  data-t-close={esFallback.aria.close}
  data-t-gallery={esFallback.aria.gallery}
>
  <!-- Carrusel -->
  <div class="relative group md:w-[70%] mx-auto">
    <button
      type="button"
      class="absolute left-2 top-1/2 -translate-y-1/2 z-10 rounded-full bg-white/90 backdrop-blur
             border border-neutralish-300 p-2 shadow hover:bg-white text-neutralish-700
             focus:outline-none focus-visible:ring-2 ring-offset-2 ring-finca-300"
      aria-label={esFallback.aria.prev}
      data-prev
    >
      <svg viewBox="0 0 24 24" class="w-5 h-5"
        ><path
          d="M15 18l-6-6 6-6"
          fill="none"
          stroke="currentColor"
          stroke-width="1.5"></path></svg
      >
    </button>
    <button
      type="button"
      class="absolute right-2 top-1/2 -translate-y-1/2 z-10 rounded-full bg-white/90 backdrop-blur
             border border-neutralish-300 p-2 shadow hover:bg-white text-neutralish-700
             focus:outline-none focus-visible:ring-2 ring-offset-2 ring-finca-300"
      aria-label={esFallback.aria.next}
      data-next
    >
      <svg viewBox="0 0 24 24" class="w-5 h-5"
        ><path
          d="M9 6l6 6-6 6"
          fill="none"
          stroke="currentColor"
          stroke-width="1.5"></path></svg
      >
    </button>

    <div class="overflow-hidden rounded-2xl px-2 sm:px-4 py-4 bg-transparent">
      <ul
        class="flex justify-start gap-4 overflow-x-auto scroll-smooth snap-x snap-mandatory"
        data-track
        tabindex="0"
        aria-label={esFallback.aria.gallery}
      >
        {
          images.map((item, i) => (
            <li
              class="snap-start flex-none basis-full sm:basis-[calc((100%-1rem)/2)] lg:basis-[calc((100%-2rem)/3)]"
              data-idx={i}
            >
              <figure class="h-full flex flex-col">
                <img
                  src={item.imagen}
                  alt={item.alt}
                  loading={i < 3 ? "eager" : "lazy"}
                  decoding="async"
                  fetchpriority={i === 0 ? "high" : "auto"}
                  width={item.width}
                  height={item.height}
                  class="w-full h-56 sm:h-64 lg:h-[30rem] object-cover select-none pointer-events-auto rounded-2xl"
                />
              </figure>
            </li>
          ))
        }
      </ul>
    </div>

    <!-- LIGHTBOX -->
    <div class="fixed inset-0 z-[9999] hidden" aria-hidden="true" data-lightbox>
      <div
        class="absolute inset-0 bg-neutralish-900/80 backdrop-blur-sm z-0"
        data-lb-overlay
      >
      </div>

      <button
        type="button"
        class="absolute top-4 right-4 z-20 rounded-full bg-white/90 border border-neutralish-300 p-2 shadow focus:outline-none focus-visible:ring-2 ring-offset-2 ring-finca-300"
        aria-label={esFallback.aria.close}
        data-lb-close
      >
        <svg viewBox="0 0 24 24" class="w-5 h-5 text-neutralish-700"
          ><path
            d="M6 6l12 12M18 6l-12 12"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"></path></svg
        >
      </button>

      <button
        type="button"
        class="absolute left-3 top-1/2 -translate-y-1/2 z-20 rounded-full bg-white/90 border border-neutralish-300 p-2 shadow text-neutralish-700"
        aria-label={esFallback.aria.prev}
        data-lb-prev
      >
        <svg viewBox="0 0 24 24" class="w-6 h-6"
          ><path
            d="M15 18l-6-6 6-6"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"></path></svg
        >
      </button>
      <button
        type="button"
        class="absolute right-3 top-1/2 -translate-y-1/2 z-20 rounded-full bg-white/90 border border-neutralish-300 p-2 shadow text-neutralish-700"
        aria-label={esFallback.aria.next}
        data-lb-next
      >
        <svg viewBox="0 0 24 24" class="w-6 h-6"
          ><path
            d="M9 6l6 6-6 6"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"></path></svg
        >
      </button>

      <figure
        class="relative z-10 h-full w-full flex items-center justify-center"
      >
        <img
          data-lb-img
          class="max-h-[90vh] max-w-[95vw] object-contain will-change-transform select-none rounded-[22px] shadow-[0_10px_30px_rgba(0,0,0,.2)] bg-white cursor-zoom-in"
          alt=""
        />
      </figure>
    </div>

    <!-- Lógica cliente (JS puro) -->
    <script is:inline>
      (() => {
        const root = document.currentScript?.closest("section");
        if (!root) return;
        let images = [];
        try {
          images = JSON.parse(
            decodeURIComponent(root.dataset.payload || "%5B%5D")
          );
        } catch (e) {
          console.error("Payload inválido:", e);
          return;
        }

        const tPrev = root.dataset.tPrev || "Anterior";
        const tNext = root.dataset.tNext || "Siguiente";
        const tClose = root.dataset.tClose || "Cerrar";
        const tGallery = root.dataset.tGallery || "Galería de imágenes";
        const intervalMs = Number(root.dataset.interval || 0);

        const track = root.querySelector("[data-track]");
        const prevBtn = root.querySelector("[data-prev]");
        const nextBtn = root.querySelector("[data-next]");
        if (!track) return;

        let pageIndex = 0;
        let slidesPerPage = getSlidesPerPage();
        let timer = null;
        let isHoverOrFocus = false;
        let isVisible = true;
        let lightboxOpen = false;

        function getSlidesPerPage() {
          const w = window.innerWidth;
          if (w >= 1024) return 3;
          if (w >= 640) return 2;
          return 1;
        }
        function pagesCount() {
          const total = images.length;
          return Math.max(1, Math.ceil(total / slidesPerPage));
        }

        function goToPage(idx, smooth = true) {
          const clamped = (idx + pagesCount()) % pagesCount();
          pageIndex = clamped;
          const firstIdx = clamped * slidesPerPage;
          const li = track.querySelector(`li[data-idx="${firstIdx}"]`);
          const left = li
            ? li.getBoundingClientRect().left -
              track.getBoundingClientRect().left +
              track.scrollLeft
            : 0;
          track.scrollTo({ left, behavior: smooth ? "smooth" : "auto" });
        }

        // Alinear al primer elemento en el primer render
        const alignFirst = () => goToPage(0, false);
        requestAnimationFrame(alignFirst);
        window.addEventListener("load", alignFirst);
        function nextPage() {
          goToPage(pageIndex + 1);
        }
        function prevPage() {
          goToPage(pageIndex - 1);
        }

        function startAutoplay() {
          // si querés autoplay, descomentá:
          // if (!intervalMs || timer !== null) return;
          // timer = setInterval(() => {
          //   if (!isHoverOrFocus && isVisible && !lightboxOpen) nextPage();
          // }, intervalMs);
        }
        function stopAutoplay() {
          // clearInterval(timer);
          // timer = null;
        }

        if (prevBtn) prevBtn.addEventListener("click", prevPage);
        if (nextBtn) nextBtn.addEventListener("click", nextPage);

        track.addEventListener("keydown", (e) => {
          if (e.key === "ArrowRight") {
            e.preventDefault();
            nextPage();
          } else if (e.key === "ArrowLeft") {
            e.preventDefault();
            prevPage();
          } else if (e.key === "Home") {
            e.preventDefault();
            goToPage(0);
          } else if (e.key === "End") {
            e.preventDefault();
            goToPage(pagesCount() - 1);
          }
        });
        track.addEventListener("mouseenter", () => {
          isHoverOrFocus = true;
          stopAutoplay();
        });
        track.addEventListener("mouseleave", () => {
          isHoverOrFocus = false;
          startAutoplay();
        });
        track.addEventListener("focusin", () => {
          isHoverOrFocus = true;
          stopAutoplay();
        });
        track.addEventListener("focusout", () => {
          isHoverOrFocus = false;
          startAutoplay();
        });

        const io = new IntersectionObserver(
          ([entry]) => {
            isVisible = entry?.isIntersecting ?? true;
            if (isVisible) startAutoplay();
            else stopAutoplay();
          },
          { threshold: 0.2 }
        );
        io.observe(root);

        let resizeT;
        window.addEventListener("resize", () => {
          clearTimeout(resizeT);
          resizeT = setTimeout(() => {
            const before = slidesPerPage;
            slidesPerPage = getSlidesPerPage();
            if (slidesPerPage !== before) goToPage(0, false);
          }, 120);
        });

        // ---------- LIGHTBOX ----------
        const lb = root.querySelector("[data-lightbox]");
        const lbImg = root.querySelector("[data-lb-img]");
        const lbPrev = root.querySelector("[data-lb-prev]");
        const lbNext = root.querySelector("[data-lb-next]");
        const lbClose = root.querySelector("[data-lb-close]");
        const lbOverlay = root.querySelector("[data-lb-overlay]");

        let lbIndex = 0;
        let zoom = 1,
          panX = 0,
          panY = 0;
        let drag = false,
          startX = 0,
          startY = 0;

        track.addEventListener("click", (e) => {
          const t = e.target;
          if (!(t instanceof Element)) return;
          const img = t.closest("img");
          if (!img) return;
          const li = img.closest("li");
          const idx = Number(li?.getAttribute("data-idx") || "0");
          openLightbox(idx);
        });

        function openLightbox(idx) {
          lbIndex = Number.isFinite(idx) ? idx : 0;
          updateLightbox();
          if (lb) {
            lb.classList.remove("hidden");
            lb.setAttribute("aria-hidden", "false");
          }
          document.body.style.overflow = "hidden";
          lightboxOpen = true;
          stopAutoplay();
        }
        function closeLightbox() {
          if (lb) {
            lb.classList.add("hidden");
            lb.setAttribute("aria-hidden", "true");
          }
          document.body.style.overflow = "";
          lightboxOpen = false;
          resetZoom();
          startAutoplay();
        }

        function updateLightbox() {
          if (!images.length) return;
          lbIndex = (lbIndex + images.length) % images.length;
          const it = images[lbIndex];
          if (lbImg instanceof HTMLImageElement) {
            lbImg.src = it.imagen;
            lbImg.alt = it.alt || `Imagen ${lbIndex + 1}`;
          } else if (lbImg) {
            lbImg.setAttribute("src", it.imagen);
            lbImg.setAttribute("alt", it.alt || `Imagen ${lbIndex + 1}`);
          }
          preloadNeighbor();
          resetZoom();
        }

        function nextLb() {
          lbIndex++;
          updateLightbox();
        }
        function prevLb() {
          lbIndex--;
          updateLightbox();
        }

        function resetZoom() {
          zoom = 1;
          panX = 0;
          panY = 0;
          applyTransform();
          if (lbImg) {
            lbImg.classList.remove("cursor-move");
            lbImg.classList.add("cursor-zoom-in");
          }
        }
        function applyTransform() {
          if (!(lbImg instanceof HTMLElement)) return;
          lbImg.style.transform = `translate(${panX}px, ${panY}px) scale(${zoom})`;
          lbImg.style.transition = "transform 120ms ease";
          setTimeout(() => {
            if (lbImg instanceof HTMLElement) lbImg.style.transition = "";
          }, 140);
        }
        function toggleZoom(ev) {
          if (!(lbImg instanceof HTMLElement)) return;
          const rect = lbImg.getBoundingClientRect();
          const cx = ev.clientX - rect.left - rect.width / 2;
          const cy = ev.clientY - rect.top - rect.height / 2;
          if (zoom === 1) {
            zoom = 2.5;
            panX = -cx * 1.1;
            panY = -cy * 1.1;
            lbImg.classList.add("cursor-move");
            lbImg.classList.remove("cursor-zoom-in");
          } else {
            resetZoom();
            return;
          }
          applyTransform();
        }
        function startDrag(e) {
          if (zoom === 1 || !(lbImg instanceof HTMLElement)) return;
          drag = true;
          startX = e.clientX - panX;
          startY = e.clientY - panY;
        }
        function onDrag(e) {
          if (!drag) return;
          panX = e.clientX - startX;
          panY = e.clientY - startY;
          applyTransform();
        }
        function endDrag() {
          drag = false;
        }

        lbOverlay && lbOverlay.addEventListener("click", closeLightbox);
        lbClose && lbClose.addEventListener("click", closeLightbox);
        lbNext && lbNext.addEventListener("click", nextLb);
        lbPrev && lbPrev.addEventListener("click", prevLb);
        lbImg && lbImg.addEventListener("click", (e) => toggleZoom(e));
        lbImg && lbImg.addEventListener("mousedown", startDrag);
        window.addEventListener("mousemove", onDrag);
        window.addEventListener("mouseup", endDrag);

        document.addEventListener("keydown", (e) => {
          if (!lightboxOpen) return;
          if (e.key === "Escape") closeLightbox();
          if (e.key === "ArrowRight") nextLb();
          if (e.key === "ArrowLeft") prevLb();
          if (e.key === " ") e.preventDefault();
        });

        function preloadNeighbor() {
          const set = images;
          if (!set.length) return;
          const n1 = new Image();
          n1.src = set[(lbIndex + 1) % set.length]?.imagen || "";
          const n2 = new Image();
          n2.src = set[(lbIndex - 1 + set.length) % set.length]?.imagen || "";
        }

        updateLightbox();
        startAutoplay();
        document.addEventListener("visibilitychange", () => {
          if (document.hidden) stopAutoplay();
          else if (!lightboxOpen) startAutoplay();
        });
      })();
    </script>
  </div>

  <style is:global>
    [data-track] {
      scroll-snap-type: x mandatory;
      -webkit-overflow-scrolling: touch;
      scrollbar-width: none;
    }
    [data-track]::-webkit-scrollbar {
      width: 0;
      height: 0;
      display: none;
    }
  </style>
</section>
