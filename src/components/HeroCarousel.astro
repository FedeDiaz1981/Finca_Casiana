---
type Img = { src: string; alt?: string; width?: number; height?: number };
type Labels = {
  checkin: string;
  checkout: string;
  guests: string;
  search: string;
};

type Props = {
  images?: Img[];
  locale?: string;
  searchPath?: string;
  labels?: Labels;
  brandColor?: string;
  autoplay?: boolean; // también controla autoplay del video
  intervalMs?: number;
  preloadFirstImage?: boolean;
  showSearch?: boolean;
  youtubeUrl?: string; // URL o ID de YouTube
  preferSoundAutoplay?: boolean; // intenta autoplay con sonido si el navegador lo permite

  // NUEVO: soporte MP4 local
  mp4Src?: string; // ruta al mp4 dentro de /public (e.g. "/hero.mp4")
  posterSrc?: string; // imagen de poster opcional
  loopVideo?: boolean; // por defecto true
  aspectRatio?: string;
  maxHeightPx?: number;
};

const {
  images = [],
  locale = "en",
  searchPath = `/${locale}/all-properties/`,
  labels = {
    checkin: "Check-in",
    checkout: "Check-out",
    guests: "Guests",
    search: "Search",
  },
  brandColor = "#C76B4E",
  autoplay = true,
  intervalMs = 6000,
  preloadFirstImage = true,
  showSearch = false,
  youtubeUrl,
  preferSoundAutoplay = false,

  // NUEVO
  mp4Src,
  posterSrc,
  loopVideo = true,
  aspectRatio,
  maxHeightPx = 0,
} = Astro.props as Props;

const FALLBACK: Img[] = [
  {
    src: "https://fincacasiana.com/wp-content/uploads/2025/03/cabana-1-de-finca-casiana--scaled.jpg.webp",
  },
  {
    src: "https://fincacasiana.com/wp-content/uploads/2025/03/pileta-finca-casiana-scaled.jpg.webp",
  },
  {
    src: "https://fincacasiana.com/wp-content/uploads/2025/03/parque-verde-finca-casiana-scaled.jpg.webp",
  },
  {
    src: "https://fincacasiana.com/wp-content/uploads/2025/03/dormitorio-mesa-de-luz-cabana-5-finca-casiana-scaled.jpg.webp",
  },
  {
    src: "https://fincacasiana.com/wp-content/uploads/2025/03/mates-pileta-finca-casiana-scaled.jpg.webp",
  },
  {
    src: "https://fincacasiana.com/wp-content/uploads/2025/03/Canchas-futbol-finca-casiana-scaled.jpg.webp",
  },
];
const imgs = images.length ? images : FALLBACK;

const id =
  (globalThis as any).crypto?.randomUUID?.() ??
  `hero-${Math.random().toString(36).slice(2)}`;

const defaultSearchUrl = `${searchPath}?adults=1&children=0&infants=0&pets=0`;

const inferred =
  imgs[0]?.width && imgs[0]?.height
    ? `${imgs[0]!.width}/${imgs[0]!.height}`
    : "16/9";
const RATIO = aspectRatio?.trim() || inferred;

const MAXH = Number(maxHeightPx) > 0 ? `${maxHeightPx}px` : "";

// helper para sacar el ID desde URL o recibir el ID directo
const getYouTubeId = (v?: string | null) => {
  if (!v) return null;
  if (/^[\w-]{11}$/.test(v)) return v;
  try {
    const u = new URL(v);
    if (u.hostname.includes("youtu.be")) return u.pathname.slice(1);
    const param = u.searchParams.get("v");
    if (param) return param;
    const m = u.pathname.match(/\/embed\/([\w-]{11})/);
    if (m) return m[1];
  } catch {}
  return null;
};
const YT_ID = getYouTubeId(youtubeUrl);

// NUEVO: prioridad de medios -> YouTube > MP4 > imágenes
const HAS_YT = !!YT_ID;
const HAS_MP4 = !!mp4Src;
const HAS_MEDIA = HAS_YT || HAS_MP4;
const MEDIA_TYPE = HAS_YT ? "yt" : HAS_MP4 ? "mp4" : "none";
---

{
  !HAS_MEDIA && preloadFirstImage && imgs?.[0]?.src && (
    <link rel="preload" as="image" href={imgs[0].src} />
  )
}
{
  HAS_MP4 && mp4Src && autoplay && (
    <link rel="preload" as="video" href={mp4Src} />
  )
}

<link rel="stylesheet" href="https://unpkg.com/aos@2.3.4/dist/aos.css" />

<section
  class="hero"
  style={`--brand:${brandColor}`}
  data-hero={id}
  data-has-video={String(HAS_MEDIA)}
  data-video-type={MEDIA_TYPE}
  data-autoplay={String(autoplay)}
  data-prefer-sound={String(preferSoundAutoplay)}
  data-loop={String(loopVideo)}
  data-interval={String(intervalMs)}
  aria-label="Hero"
  itemscope
  itemtype="https://schema.org/ImageGallery"
>
  <div class="rail" role="region" aria-roledescription="carousel">
    <div class="slides" aria-live="polite" tabindex="0">
      {
        HAS_YT ? (
          // VIDEO DE YOUTUBE
          <div class="video-wrap" data-video>
            <iframe
              class="video-iframe"
              src={`https://www.youtube-nocookie.com/embed/${YT_ID}?autoplay=${autoplay ? 1 : 0}&mute=${preferSoundAutoplay ? 0 : 1}&playsinline=1&controls=0&modestbranding=1&rel=0&loop=1&playlist=${YT_ID}&fs=0&disablekb=1&iv_load_policy=3&enablejsapi=1`}
              title="Video"
              allow="autoplay; encrypted-media; picture-in-picture"
              referrerpolicy="strict-origin-when-cross-origin"
              tabindex="-1"
            />
            <button class="unmute" data-unmute aria-label="Activar sonido">
              🔊 Activar sonido
            </button>
          </div>
        ) : HAS_MP4 ? (
          // NUEVO: VIDEO MP4 LOCAL
          <div class="video-wrap" data-video>
            <video
              class="video-el"
              src={mp4Src}
              poster={posterSrc}
              playsinline
              muted={!preferSoundAutoplay}
              autoplay={autoplay}
              loop={loopVideo}
              preload="metadata"
              tabindex="-1"
            />
            <button class="unmute" data-unmute aria-label="Activar sonido">
              🔊 Activar sonido
            </button>
          </div>
        ) : (
          // SLIDES DE IMÁGENES
          imgs.map((img, i) => (
            <figure
              class={`slide aos-init ${i === 0 ? "active aos-animate" : ""}`}
              aria-hidden={i !== 0}
              itemprop="associatedMedia"
              data-aos="fade"
              data-aos-duration="800"
              data-aos-easing="ease-out"
            >
              <img
                src={img.src}
                alt={img.alt ?? ""}
                width={img.width ?? undefined}
                height={img.height ?? undefined}
                loading={i === 0 ? "eager" : "lazy"}
                decoding="async"
                fetchpriority={i === 0 ? "high" : "auto"}
              />
            </figure>
          ))
        )
      }
    </div>
    <div class="controls">
      <button class="arrow prev" type="button" aria-label="Anterior">‹</button>

      <ol class="dots" role="tablist">
        {
          imgs.map((_, i) => (
            <li>
              <button
                class={`dot ${i === 0 ? "is-active" : ""}`}
                type="button"
                data-idx={i}
                aria-label={`Ir a la imagen ${i + 1}`}
              />
            </li>
          ))
        }
      </ol>

      <button class="arrow next" type="button" aria-label="Siguiente">›</button>
    </div>
  </div>

  {
    showSearch && (
      <div class="search-wrap">
        <form class="searchbar" data-form>
          <label class="field">
            <span>{labels.checkin}</span>
            <input type="date" name="start" inputmode="none" />
          </label>
          <label class="field">
            <span>{labels.checkout}</span>
            <input type="date" name="end" inputmode="none" />
          </label>
          <label class="field">
            <span>{labels.guests}</span>
            <select name="adults" aria-label={labels.guests}>
              <option value="1">1 adult</option>
              <option value="2">2 adults</option>
              <option value="3">3 adults</option>
              <option value="4">4 adults</option>
              <option value="5">5 adults</option>
              <option value="6">6 adults</option>
            </select>
          </label>
          <a class="cta" href={defaultSearchUrl} data-search>
            {labels.search}
            <span class="cta-arrow" aria-hidden="true">
              ›
            </span>
          </a>
        </form>
        <a class="cta mobile" href={defaultSearchUrl} data-search>
          {labels.search}
        </a>
      </div>
    )
  }
</section>

<script src="https://unpkg.com/aos@2.3.4/dist/aos.js" defer></script>
<script is:inline data-hero={id}>
  (() => {
    const HERO_ID = document.currentScript?.getAttribute("data-hero");
    if (!HERO_ID) return;

    const root = document.querySelector(`[data-hero="${HERO_ID}"]`);
    if (!root) return;

    const HAS_MEDIA = root.dataset.hasVideo === "true"; // video (yt/mp4)
    const AUTOPLAY = root.dataset.autoplay === "true";
    const INTERVAL = Math.max(800, Number(root.dataset.interval || 6000)); // ms

    // ---------- SI ES *IMAGEN* ----------
    // ---------- SI ES *IMAGEN* ----------
    if (root.dataset.hasVideo !== "true") {
      const slides = Array.from(root.querySelectorAll(".slide"));
      if (!slides.length) return;

      const AUTOPLAY = root.dataset.autoplay === "true";
      const INTERVAL = Math.max(800, Number(root.dataset.interval || 6000));

      // UI
      const dotsWrap = root.querySelector(".dots");
      const arrows = root.querySelector(".arrows");
      const prevBtn = root.querySelector(".arrow.prev");
      const nextBtn = root.querySelector(".arrow.next");

      // Si no hay suficientes imágenes, ocultar controles
      if (slides.length < 2) {
        root.classList.add("hide-controls");
        return;
      }
      root.classList.remove("hide-controls");

      // Construir dots
      dotsWrap.innerHTML = "";
      slides.forEach((_, i) => {
        const li = document.createElement("li");
        const b = document.createElement("button");
        b.type = "button";
        b.className = "dot";
        b.setAttribute("aria-label", `Ir a la imagen ${i + 1}`);
        b.addEventListener("click", () => {
          idx = i;
          setActive(idx);
          restart();
        });
        li.appendChild(b);
        dotsWrap.appendChild(li);
      });
      const dots = Array.from(dotsWrap.querySelectorAll(".dot"));

      let idx = 0;
      /** @type {number | null} */
      let timer = null;
      let visible = true;
      let hover = false;

      const setActive = (i) => {
        slides.forEach((el, j) => {
          const on = j === i;
          el.classList.toggle("active", on);
          el.classList.toggle("aos-animate", on);
          el.classList.toggle("aos-init", !on);
          el.setAttribute("aria-hidden", String(!on));
        });
        dots.forEach((d, j) => {
          const on = j === i;
          d.classList.toggle("is-active", on);
          d.setAttribute("aria-current", on ? "true" : "false");
        });
      };

      const start = () => {
        if (!AUTOPLAY || timer || slides.length < 2) return;
        timer = window.setInterval(() => {
          if (visible && !hover) {
            idx = (idx + 1) % slides.length;
            setActive(idx);
          }
        }, INTERVAL);
      };
      const stop = () => {
        if (timer !== null) {
          clearInterval(timer);
          timer = null;
        }
      };
      const restart = () => {
        stop();
        start();
      };

      // Flechas
      prevBtn.addEventListener("click", () => {
        idx = (idx - 1 + slides.length) % slides.length;
        setActive(idx);
        restart();
      });
      nextBtn.addEventListener("click", () => {
        idx = (idx + 1) % slides.length;
        setActive(idx);
        restart();
      });

      // Teclado
      root.addEventListener("keydown", (e) => {
        if (e.key === "ArrowLeft") {
          e.preventDefault();
          prevBtn.click();
        }
        if (e.key === "ArrowRight") {
          e.preventDefault();
          nextBtn.click();
        }
      });

      // Hover + visibilidad
      setActive(0);
      start();
      root.addEventListener("mouseenter", () => {
        hover = true;
        stop();
      });
      root.addEventListener("mouseleave", () => {
        hover = false;
        start();
      });

      const io = new IntersectionObserver(
        ([e]) => {
          visible = !!(e && e.isIntersecting);
          visible ? start() : stop();
        },
        { threshold: 0.15 }
      );
      io.observe(root);

      return; // no seguir a rama de video
    }

    // ---------- SI ES *VIDEO* ----------
    const TYPE = root.dataset.videoType; // "yt" | "mp4"
    const PREFER_SOUND = root.dataset.preferSound === "true";
    const SHOULD_LOOP = root.dataset.loop === "true";

    const wrap = root.querySelector(".video-wrap");
    const btn = wrap?.querySelector("[data-unmute]");
    if (!wrap) return;

    if (TYPE === "yt") {
      const iframe = wrap.querySelector(".video-iframe");
      if (!iframe) return;

      function fitYT() {
        const { width: W, height: H } = wrap.getBoundingClientRect();
        if (!W || !H) return;
        const Rv = 16 / 9,
          Rc = W / H;
        if (Rc > Rv) {
          iframe.style.width = W + "px";
          iframe.style.height = W / Rv + "px";
        } else {
          iframe.style.width = H * Rv + "px";
          iframe.style.height = H + "px";
        }
        Object.assign(iframe.style, {
          position: "absolute",
          top: "50%",
          left: "50%",
          transform: "translate(-50%, -50%)",
        });
      }
      function yt(cmd, args = []) {
        iframe.contentWindow?.postMessage(
          JSON.stringify({ event: "command", func: cmd, args }),
          "*"
        );
      }
      function firstGesture() {
        yt("unMute");
        yt("setVolume", [100]);
        yt("playVideo");
        btn?.classList.add("is-hidden");
      }
      ["pointerdown", "touchstart", "keydown", "wheel"].forEach((evt) =>
        window.addEventListener(evt, firstGesture, {
          once: true,
          passive: true,
        })
      );

      btn?.addEventListener("click", (e) => {
        e.preventDefault();
        firstGesture();
      });

      fitYT();
      new ResizeObserver(fitYT).observe(wrap);
      addEventListener("resize", fitYT);

      const io = new IntersectionObserver(
        (entries) => {
          entries.forEach((e) => {
            e.isIntersecting ? yt("playVideo") : yt("pauseVideo");
          });
        },
        { threshold: 0.15 }
      );
      io.observe(wrap);
      return;
    }

    // MP4 local
    const video = wrap.querySelector("video.video-el");
    if (!video) return;
    video.loop = SHOULD_LOOP;

    async function tryAutoplay() {
      if (!AUTOPLAY) return;
      try {
        video.muted = !PREFER_SOUND;
        if (!video.muted) video.volume = 1.0;
        await video.play();
      } catch {
        try {
          video.muted = true;
          await video.play();
        } catch {}
      }
    }
    function firstGesture() {
      video.muted = false;
      video.volume = 1.0;
      video.play().catch(() => {});
      btn?.classList.add("is-hidden");
    }
    ["pointerdown", "touchstart", "keydown", "wheel"].forEach((evt) =>
      window.addEventListener(evt, firstGesture, { once: true, passive: true })
    );
    btn?.addEventListener("click", (e) => {
      e.preventDefault();
      firstGesture();
    });

    const io = new IntersectionObserver(
      (entries) => {
        entries.forEach((e) => {
          e.isIntersecting ? video.play().catch(() => {}) : video.pause();
        });
      },
      { threshold: 0.15 }
    );
    io.observe(wrap);

    tryAutoplay();
  })();
</script>

<style>
  /* ===== HERO FULLSCREEN ===== */
:root, body{ overflow-x: clip; } /* evita scroll horizontal por full-bleed */

.hero{
  position: relative;
  width: 100vw;
  height: 100dvh;          /* alto pantalla (mobile-safe) */
  min-height: 100svh;
  margin: 0;
  border-radius: 0;
  overflow: hidden;
  background: #000;
}

/* Contenedor interno ocupa todo */
.rail{
  position: relative;      /* necesario para posicionar controles */
  inset: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

/* Slides superpuestos con fade (AOS) + Ken Burns */
.slides{ position: relative; width:100%; height:100%; }
.slide{
  position: absolute; inset: 0; margin: 0;
  opacity: 0; transition: opacity .8s ease; will-change: opacity;
}
.slide.active{ opacity: 1; z-index: 2; }

/* Imagen/Video a pantalla completa */
.video-wrap{ position:absolute; inset:0; overflow:hidden; background:#000; }
.video-iframe,
.video-el{
  position:absolute; inset:0;
  display:block; border:0; pointer-events:none;
  width:100%; height:100%;
}
.video-el{ object-fit: cover; }

/* Imagen */
.slide img{
  width:100%; height:100%;
  object-fit: cover; object-position: 50% 50%;
  display:block;
  transform-origin: var(--ox,50%) var(--oy,50%);
  animation: kenIn var(--ken,8000ms) ease-out forwards;
}
.slide:nth-child(1){ --ox:20%; --oy:20%; }
.slide:nth-child(2){ --ox:80%; --oy:20%; }
.slide:nth-child(3){ --ox:50%; --oy:50%; }
.slide:nth-child(4){ --ox:20%; --oy:80%; }
.slide:nth-child(5){ --ox:80%; --oy:80%; }
.slide:nth-child(6){ --ox:50%; --oy:30%; }

@keyframes kenIn{ from{ transform: scale(1.08);} to{ transform: scale(1);} }
.slide[data-aos].aos-init{ opacity:0; transform:none; }
.slide[data-aos].aos-animate{ opacity:1; transform:none; }

/* ===== Controles (flechas + dots) ===== */
.controls{
  position: absolute; inset: 0;
  z-index: 60;                /* por encima de slides/buscador */
  pointer-events: none;       /* sólo hijos reciben eventos */
}

/* Flechas */
.arrow{
  pointer-events: auto;
  position: absolute; top: 50%; transform: translateY(-50%);
  width: 44px; height: 44px; border-radius: 9999px;
  border: 0; cursor: pointer;
  background: rgba(0,0,0,.36); color:#fff; font-size:24px;
  display: grid; place-items: center;
  transition: background .15s ease, transform .15s ease;
}
.arrow.prev{ left: 12px; }
.arrow.next{ right: 12px; }
.arrow:hover{ background: rgba(0,0,0,.55); transform: translateY(-50%) scale(1.04); }
.arrow:focus-visible{ outline: 2px solid #fff; outline-offset: 2px; }

/* Dots: ancho completo y centrados */
.dots{
  pointer-events: auto;
  position: absolute; left: 0; right: 0;
  bottom: clamp(10px, 2.5vh, 22px);
  display: flex; justify-content: center; align-items: center;
  gap: 10px; margin: 0; padding: 0 12px; list-style: none;
}
.dots li{ margin: 0; padding: 0; }
.dot{
  display: block;
  width: 12px; height: 12px; border-radius: 9999px;
  border: 0; cursor: pointer;
  background: rgba(255,255,255,.85);
  box-shadow: 0 0 0 1px rgba(0,0,0,.35) inset;
}
.dot.is-active{
  background:#fff;
  box-shadow: 0 0 0 2px rgba(0,0,0,.45) inset;
}
.dot:focus-visible{ outline: 2px solid #fff; outline-offset: 2px; }

/* Buscador debajo de los controles para no taparlos */
.search-wrap{ z-index: 20; }

@media (max-width:768px){
  .arrow{ width: 36px; height: 36px; font-size: 20px; }
  .dots{ gap: 8px; }
}

</style>

<style is:global>
/* Asegurá anclaje para posicionar la UI */
.rail{ position: relative; }

/* Overlay de controles */
.controls{
  position: absolute; inset: 0;
  z-index: 60;
  pointer-events: none;           /* sólo hijos reciben eventos */
}

/* Flechas */
.controls .arrow{
  pointer-events: auto;
  position: absolute; top: 50%; transform: translateY(-50%);
  width: 44px; height: 44px; border-radius: 9999px;
  border: 0; cursor: pointer;
  background: rgba(0,0,0,.36); color:#fff; font-size:24px;
  display: grid; place-items: center;
  transition: background .15s ease, transform .15s ease;
}
.controls .arrow.prev{ left: 12px; }
.controls .arrow.next{ right: 12px; }
.controls .arrow:hover{ background: rgba(0,0,0,.55); transform: translateY(-50%) scale(1.04); }
.controls .arrow:focus-visible{ outline: 2px solid #fff; outline-offset: 2px; }

/* Dots centrados y con ancho/alto explícitos */
.controls .dots{
  pointer-events: auto;
  position: absolute; left: 0; right: 0;
  bottom: clamp(10px, 2.5vh, 22px);
  display: flex; justify-content: center; align-items: center;
  gap: 10px; margin: 0; padding: 0 12px; list-style: none;
}
.controls .dots li{ margin: 0; padding: 0; }

/* 👇 FORZAMOS tamaño + display por si un reset hace inline o all:unset */
.controls .dot{
  display: inline-block;
  inline-size: 12px;           /* width */
  block-size: 12px;            /* height */
  padding: 0;
  border: 0;
  border-radius: 9999px;
  background: rgba(255,255,255,.85);
  box-shadow: 0 0 0 1px rgba(0,0,0,.35) inset;
  cursor: pointer;
  -webkit-appearance: none;
  appearance: none;
  flex-shrink: 0;              /* que nunca colapse a 0 */
}
.controls .dot.is-active{
  background: #fff;
  box-shadow: 0 0 0 2px rgba(0,0,0,.45) inset;
}
.controls .dot:focus-visible{ outline: 2px solid #fff; outline-offset: 2px; }

/* Si el buscador tapa, que quede debajo */
.search-wrap{ z-index: 20; }
</style>